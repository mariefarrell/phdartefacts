{-# OPTIONS -w -O0 #-}
{- |
Module      :  EVT/ATC_EVT.der.hs
Description :  generated ShATermConvertible instances
Copyright   :  (c) DFKI GmbH 2012
License     :  GPLv2 or higher, see LICENSE.txt

Maintainer  :  Christian.Maeder@dfki.de
Stability   :  provisional
Portability :  non-portable(derive Typeable instances)

Automatic derivation of instances via DrIFT-rule ShATermConvertible
  for the type(s):
'EVT.AS.MACHINE'
'EVT.AS.EVTBasicExt'
'EVT.AS.EVENT'
'EVT.AS.GUARD'
'EVT.AS.ACTION'
'EVT.AS.EVTQualId'
'EVT.AS.EVTSymbol'
'EVT.AS.EVTSYMB_MAP_ITEMS'
'EVT.AS.EVTSYMB_OR_MAP'
'EVT.AS.EVTSYMB_ITEMS'
'EVT.AS.EVTRawSymbol'
'EVT.SignEVT.EVTSignature'
'EVT.SignEVT.EVTCASLSen'
'EVT.SignEVT.EVTMorphism'
-}

{-
Generated by 'genRules' (automatic rule generation for DrIFT). Don't touch!!
  dependency files:
EVT/AS.hs
EVT/SignEVT.hs
-}

module EVT.ATC_EVT () where

import ATC.GlobalAnnotations
import ATerm.Lib
import CASL.AS_Basic_CASL
import CASL.ATC_CASL ()
import CASL.Morphism as CASL_Morphism
import CASL.Overload
import CASL.Sign
import Common.AS_Annotation
import Common.Doc
import Common.DocUtils
import Common.GlobalAnnotations
import Common.Id as Id
import Common.Result
import Common.Token
import Data.Data
import Data.Set as Set
import EVT.AS
import EVT.Keywords
import EVT.SignEVT
import qualified CASL.MapSentence as CASL_MapSen
import qualified Data.Map as Map

{-! for EVT.AS.MACHINE derive : ShATermConvertible !-}
{-! for EVT.AS.EVTBasicExt derive : ShATermConvertible !-}
{-! for EVT.AS.EVENT derive : ShATermConvertible !-}
{-! for EVT.AS.GUARD derive : ShATermConvertible !-}
{-! for EVT.AS.ACTION derive : ShATermConvertible !-}
{-! for EVT.AS.EVTQualId derive : ShATermConvertible !-}
{-! for EVT.AS.EVTSymbol derive : ShATermConvertible !-}
{-! for EVT.AS.EVTSYMB_MAP_ITEMS derive : ShATermConvertible !-}
{-! for EVT.AS.EVTSYMB_OR_MAP derive : ShATermConvertible !-}
{-! for EVT.AS.EVTSYMB_ITEMS derive : ShATermConvertible !-}
{-! for EVT.AS.EVTRawSymbol derive : ShATermConvertible !-}
{-! for EVT.SignEVT.EVTSignature derive : ShATermConvertible !-}
{-! for EVT.SignEVT.EVTCASLSen derive : ShATermConvertible !-}
{-! for EVT.SignEVT.EVTMorphism derive : ShATermConvertible !-}

-- Generated by DrIFT, look but don't touch!

instance ShATermConvertible EVTRawSymbol where
  toShATermAux att0 xv = case xv of
    EVTRawSymbol a -> do
      (att1, a') <- toShATerm' att0 a
      return $ addATerm (ShAAppl "EVTRawSymbol" [a'] []) att1
  fromShATermAux ix att0 = case getShATerm ix att0 of
    ShAAppl "EVTRawSymbol" [a] _ ->
      case fromShATerm' a att0 of
      { (att1, a') ->
      (att1, EVTRawSymbol a') }
    u -> fromShATermError "EVTRawSymbol" u

instance ShATermConvertible EVTSYMB_ITEMS where
  toShATermAux att0 xv = case xv of
    EvtSymb_items a -> do
      (att1, a') <- toShATerm' att0 a
      return $ addATerm (ShAAppl "EvtSymb_items" [a'] []) att1
  fromShATermAux ix att0 = case getShATerm ix att0 of
    ShAAppl "EvtSymb_items" [a] _ ->
      case fromShATerm' a att0 of
      { (att1, a') ->
      (att1, EvtSymb_items a') }
    u -> fromShATermError "EVTSYMB_ITEMS" u

instance ShATermConvertible EVTSYMB_OR_MAP where
  toShATermAux att0 xv = case xv of
    EvtSymb a -> do
      (att1, a') <- toShATerm' att0 a
      return $ addATerm (ShAAppl "EvtSymb" [a'] []) att1
    EvtSymb_map a b -> do
      (att1, a') <- toShATerm' att0 a
      (att2, b') <- toShATerm' att1 b
      return $ addATerm (ShAAppl "EvtSymb_map" [a', b'] []) att2
  fromShATermAux ix att0 = case getShATerm ix att0 of
    ShAAppl "EvtSymb" [a] _ ->
      case fromShATerm' a att0 of
      { (att1, a') ->
      (att1, EvtSymb a') }
    ShAAppl "EvtSymb_map" [a, b] _ ->
      case fromShATerm' a att0 of
      { (att1, a') ->
      case fromShATerm' b att1 of
      { (att2, b') ->
      (att2, EvtSymb_map a' b') }}
    u -> fromShATermError "EVTSYMB_OR_MAP" u

instance ShATermConvertible EVTSYMB_MAP_ITEMS where
  toShATermAux att0 xv = case xv of
    EvtSymb_map_items a -> do
      (att1, a') <- toShATerm' att0 a
      return $ addATerm (ShAAppl "EvtSymb_map_items" [a'] []) att1
  fromShATermAux ix att0 = case getShATerm ix att0 of
    ShAAppl "EvtSymb_map_items" [a] _ ->
      case fromShATerm' a att0 of
      { (att1, a') ->
      (att1, EvtSymb_map_items a') }
    u -> fromShATermError "EVTSYMB_MAP_ITEMS" u

instance ShATermConvertible EVTSymbol where
  toShATermAux att0 xv = case xv of
    EVTguard a -> do
      (att1, a') <- toShATerm' att0 a
      return $ addATerm (ShAAppl "EVTguard" [a'] []) att1
    EVTaction a -> do
      (att1, a') <- toShATerm' att0 a
      return $ addATerm (ShAAppl "EVTaction" [a'] []) att1
    E a -> do
      (att1, a') <- toShATerm' att0 a
      return $ addATerm (ShAAppl "E" [a'] []) att1
  fromShATermAux ix att0 = case getShATerm ix att0 of
    ShAAppl "EVTguard" [a] _ ->
      case fromShATerm' a att0 of
      { (att1, a') ->
      (att1, EVTguard a') }
    ShAAppl "EVTaction" [a] _ ->
      case fromShATerm' a att0 of
      { (att1, a') ->
      (att1, EVTaction a') }
    ShAAppl "E" [a] _ ->
      case fromShATerm' a att0 of
      { (att1, a') ->
      (att1, E a') }
    u -> fromShATermError "EVTSymbol" u

instance ShATermConvertible EVTQualId where
  toShATermAux att0 xv = case xv of
    EVTQualId a -> do
      (att1, a') <- toShATerm' att0 a
      return $ addATerm (ShAAppl "EVTQualId" [a'] []) att1
  fromShATermAux ix att0 = case getShATerm ix att0 of
    ShAAppl "EVTQualId" [a] _ ->
      case fromShATerm' a att0 of
      { (att1, a') ->
      (att1, EVTQualId a') }
    u -> fromShATermError "EVTQualId" u

instance ShATermConvertible ACTION where
  toShATermAux att0 xv = case xv of
    ACTION a b -> do
      (att1, a') <- toShATerm' att0 a
      (att2, b') <- toShATerm' att1 b
      return $ addATerm (ShAAppl "ACTION" [a', b'] []) att2
  fromShATermAux ix att0 = case getShATerm ix att0 of
    ShAAppl "ACTION" [a, b] _ ->
      case fromShATerm' a att0 of
      { (att1, a') ->
      case fromShATerm' b att1 of
      { (att2, b') ->
      (att2, ACTION a' b') }}
    u -> fromShATermError "ACTION" u

instance ShATermConvertible GUARD where
  toShATermAux att0 xv = case xv of
    GUARD a b -> do
      (att1, a') <- toShATerm' att0 a
      (att2, b') <- toShATerm' att1 b
      return $ addATerm (ShAAppl "GUARD" [a', b'] []) att2
  fromShATermAux ix att0 = case getShATerm ix att0 of
    ShAAppl "GUARD" [a, b] _ ->
      case fromShATerm' a att0 of
      { (att1, a') ->
      case fromShATerm' b att1 of
      { (att2, b') ->
      (att2, GUARD a' b') }}
    u -> fromShATermError "GUARD" u

instance ShATermConvertible EVENT where
  toShATermAux att0 xv = case xv of
    EVENT a b c -> do
      (att1, a') <- toShATerm' att0 a
      (att2, b') <- toShATerm' att1 b
      (att3, c') <- toShATerm' att2 c
      return $ addATerm (ShAAppl "EVENT" [a', b', c'] []) att3
  fromShATermAux ix att0 = case getShATerm ix att0 of
    ShAAppl "EVENT" [a, b, c] _ ->
      case fromShATerm' a att0 of
      { (att1, a') ->
      case fromShATerm' b att1 of
      { (att2, b') ->
      case fromShATerm' c att2 of
      { (att3, c') ->
      (att3, EVENT a' b' c') }}}
    u -> fromShATermError "EVENT" u

instance ShATermConvertible EVTBasicExt where
  toShATermAux att0 xv = case xv of
    Events a -> do
      (att1, a') <- toShATerm' att0 a
      return $ addATerm (ShAAppl "Events" [a'] []) att1
  fromShATermAux ix att0 = case getShATerm ix att0 of
    ShAAppl "Events" [a] _ ->
      case fromShATerm' a att0 of
      { (att1, a') ->
      (att1, Events a') }
    u -> fromShATermError "EVTBasicExt" u

instance ShATermConvertible MACHINE where
  toShATermAux att0 xv = case xv of
    MACHINE a -> do
      (att1, a') <- toShATerm' att0 a
      return $ addATerm (ShAAppl "MACHINE" [a'] []) att1
  fromShATermAux ix att0 = case getShATerm ix att0 of
    ShAAppl "MACHINE" [a] _ ->
      case fromShATerm' a att0 of
      { (att1, a') ->
      (att1, MACHINE a') }
    u -> fromShATermError "MACHINE" u

instance ShATermConvertible EVTMorphism where
  toShATermAux att0 xv = case xv of
    EVTMorphism a b c d -> do
      (att1, a') <- toShATerm' att0 a
      (att2, b') <- toShATerm' att1 b
      (att3, c') <- toShATerm' att2 c
      (att4, d') <- toShATerm' att3 d
      return $ addATerm (ShAAppl "EVTMorphism" [a', b', c', d'] []) att4
  fromShATermAux ix att0 = case getShATerm ix att0 of
    ShAAppl "EVTMorphism" [a, b, c, d] _ ->
      case fromShATerm' a att0 of
      { (att1, a') ->
      case fromShATerm' b att1 of
      { (att2, b') ->
      case fromShATerm' c att2 of
      { (att3, c') ->
      case fromShATerm' d att3 of
      { (att4, d') ->
      (att4, EVTMorphism a' b' c' d') }}}}
    u -> fromShATermError "EVTMorphism" u

instance ShATermConvertible EVTCASLSen where
  toShATermAux att0 xv = case xv of
    EVTCASLSen a b -> do
      (att1, a') <- toShATerm' att0 a
      (att2, b') <- toShATerm' att1 b
      return $ addATerm (ShAAppl "EVTCASLSen" [a', b'] []) att2
  fromShATermAux ix att0 = case getShATerm ix att0 of
    ShAAppl "EVTCASLSen" [a, b] _ ->
      case fromShATerm' a att0 of
      { (att1, a') ->
      case fromShATerm' b att1 of
      { (att2, b') ->
      (att2, EVTCASLSen a' b') }}
    u -> fromShATermError "EVTCASLSen" u

instance ShATermConvertible EVTSignature where
  toShATermAux att0 xv = case xv of
    EVTSignature a -> do
      (att1, a') <- toShATerm' att0 a
      return $ addATerm (ShAAppl "EVTSignature" [a'] []) att1
  fromShATermAux ix att0 = case getShATerm ix att0 of
    ShAAppl "EVTSignature" [a] _ ->
      case fromShATerm' a att0 of
      { (att1, a') ->
      (att1, EVTSignature a') }
    u -> fromShATermError "EVTSignature" u
